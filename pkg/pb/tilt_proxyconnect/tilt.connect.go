// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tilt.proto

package tilt_proxyconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	tilt_proxy "github.com/jtway/tilt-proxy"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TiltServiceName is the fully-qualified name of the TiltService service.
	TiltServiceName = "tiltproxy.TiltService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TiltServiceTiltProcedure is the fully-qualified name of the TiltService's Tilt RPC.
	TiltServiceTiltProcedure = "/tiltproxy.TiltService/Tilt"
	// TiltServiceTiltsProcedure is the fully-qualified name of the TiltService's Tilts RPC.
	TiltServiceTiltsProcedure = "/tiltproxy.TiltService/Tilts"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tiltServiceServiceDescriptor     = tilt_proxy.File_tilt_proto.Services().ByName("TiltService")
	tiltServiceTiltMethodDescriptor  = tiltServiceServiceDescriptor.Methods().ByName("Tilt")
	tiltServiceTiltsMethodDescriptor = tiltServiceServiceDescriptor.Methods().ByName("Tilts")
)

// TiltServiceClient is a client for the tiltproxy.TiltService service.
type TiltServiceClient interface {
	Tilt(context.Context, *connect.Request[tilt_proxy.TiltRequest]) (*connect.Response[tilt_proxy.TiltResponse], error)
	Tilts(context.Context, *connect.Request[tilt_proxy.TiltsRequest]) (*connect.Response[tilt_proxy.TiltsResponse], error)
}

// NewTiltServiceClient constructs a client for the tiltproxy.TiltService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTiltServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TiltServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tiltServiceClient{
		tilt: connect.NewClient[tilt_proxy.TiltRequest, tilt_proxy.TiltResponse](
			httpClient,
			baseURL+TiltServiceTiltProcedure,
			connect.WithSchema(tiltServiceTiltMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		tilts: connect.NewClient[tilt_proxy.TiltsRequest, tilt_proxy.TiltsResponse](
			httpClient,
			baseURL+TiltServiceTiltsProcedure,
			connect.WithSchema(tiltServiceTiltsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tiltServiceClient implements TiltServiceClient.
type tiltServiceClient struct {
	tilt  *connect.Client[tilt_proxy.TiltRequest, tilt_proxy.TiltResponse]
	tilts *connect.Client[tilt_proxy.TiltsRequest, tilt_proxy.TiltsResponse]
}

// Tilt calls tiltproxy.TiltService.Tilt.
func (c *tiltServiceClient) Tilt(ctx context.Context, req *connect.Request[tilt_proxy.TiltRequest]) (*connect.Response[tilt_proxy.TiltResponse], error) {
	return c.tilt.CallUnary(ctx, req)
}

// Tilts calls tiltproxy.TiltService.Tilts.
func (c *tiltServiceClient) Tilts(ctx context.Context, req *connect.Request[tilt_proxy.TiltsRequest]) (*connect.Response[tilt_proxy.TiltsResponse], error) {
	return c.tilts.CallUnary(ctx, req)
}

// TiltServiceHandler is an implementation of the tiltproxy.TiltService service.
type TiltServiceHandler interface {
	Tilt(context.Context, *connect.Request[tilt_proxy.TiltRequest]) (*connect.Response[tilt_proxy.TiltResponse], error)
	Tilts(context.Context, *connect.Request[tilt_proxy.TiltsRequest]) (*connect.Response[tilt_proxy.TiltsResponse], error)
}

// NewTiltServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTiltServiceHandler(svc TiltServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tiltServiceTiltHandler := connect.NewUnaryHandler(
		TiltServiceTiltProcedure,
		svc.Tilt,
		connect.WithSchema(tiltServiceTiltMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tiltServiceTiltsHandler := connect.NewUnaryHandler(
		TiltServiceTiltsProcedure,
		svc.Tilts,
		connect.WithSchema(tiltServiceTiltsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/tiltproxy.TiltService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TiltServiceTiltProcedure:
			tiltServiceTiltHandler.ServeHTTP(w, r)
		case TiltServiceTiltsProcedure:
			tiltServiceTiltsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTiltServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTiltServiceHandler struct{}

func (UnimplementedTiltServiceHandler) Tilt(context.Context, *connect.Request[tilt_proxy.TiltRequest]) (*connect.Response[tilt_proxy.TiltResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tiltproxy.TiltService.Tilt is not implemented"))
}

func (UnimplementedTiltServiceHandler) Tilts(context.Context, *connect.Request[tilt_proxy.TiltsRequest]) (*connect.Response[tilt_proxy.TiltsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tiltproxy.TiltService.Tilts is not implemented"))
}
